{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/maupassant/LICENSE","hash":"019dc6a9aba02ae3aaabca45f39aecd6e8e7f1d8","modified":1462982813000},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1462982813000},{"_id":"themes/maupassant/_config.yml","hash":"778701dfc6bde6d1e40c965053be2d68e9881197","modified":1462982813000},{"_id":"themes/maupassant/README.md","hash":"0e271dc27e3e6cfc467baccec8c86bd5dfa3cefc","modified":1462982813000},{"_id":"themes/maupassant/package.json","hash":"81fb4e2ac051ecfb9a93f37b28910291b939771a","modified":1462982813000},{"_id":"themes/maupassant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1462982813000},{"_id":"themes/maupassant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1462982806000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1462980553000},{"_id":"themes/maupassant/.git/config","hash":"037345b11c41abb3dbbbd6e0242ced24979a7097","modified":1462982813000},{"_id":"themes/maupassant/.git/index","hash":"9d6c887ced6ce7d57166df881646735436a0abac","modified":1462982813000},{"_id":"themes/maupassant/.git/packed-refs","hash":"cbdf19e385922d434271c7257b1eef5beeccc30d","modified":1462982813000},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1462982813000},{"_id":"themes/maupassant/languages/en.yml","hash":"e13ab1a2d2f1edbe67b4c035fd4667cb6a31db8e","modified":1462982813000},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1462982813000},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1462982813000},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1462982813000},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"ebacfa5d0c14d603e0d505757adb24c0bbe5dd13","modified":1462982813000},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"56b65995c60e99dcebbf00168447fd225d28e5b2","modified":1462982813000},{"_id":"themes/maupassant/layout/base.jade","hash":"ce9e1efb5a039d785445d2c89ba33cb0967f21df","modified":1462982813000},{"_id":"themes/maupassant/layout/archive.jade","hash":"0050c883b4f202add71c8664d65e6072179e7190","modified":1462982813000},{"_id":"themes/maupassant/layout/index.jade","hash":"7466ce52023ed8a413a6b4461354a9e20e62fc14","modified":1462982813000},{"_id":"themes/maupassant/layout/page.jade","hash":"8d70fd3b93f2c9087a9ea7ec538dcc1d413bea01","modified":1462982813000},{"_id":"themes/maupassant/layout/post.jade","hash":"9cf29fb0daed95935154ce0fa2b154df5a9b11b1","modified":1462982813000},{"_id":"themes/maupassant/layout/timeline.jade","hash":"f03d8df63a188543cfe4e85e76194abe081411a1","modified":1462982813000},{"_id":"themes/maupassant/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1462982806000},{"_id":"themes/maupassant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1462982806000},{"_id":"themes/maupassant/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1462982806000},{"_id":"themes/maupassant/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1462982806000},{"_id":"themes/maupassant/.git/hooks/prepare-commit-msg.sample","hash":"707eb22711a77563593b7bf54eb9a248d3092b04","modified":1462982806000},{"_id":"themes/maupassant/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1462982806000},{"_id":"themes/maupassant/.git/hooks/pre-rebase.sample","hash":"dba985f0a1689c5fdffad4434a1d4d4080d42737","modified":1462982806000},{"_id":"themes/maupassant/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1462982806000},{"_id":"themes/maupassant/.git/logs/HEAD","hash":"56a989fef58fb7398267efbf57cb6a5e1e7352d1","modified":1462982813000},{"_id":"themes/maupassant/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1462982806000},{"_id":"themes/maupassant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1462982806000},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"3dbcc9a9f0d6e55da191d3393c18bbfcfe99fa69","modified":1462982813000},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"6c7f63ba04a4d28323ba31e79a4927f3d3fcc56e","modified":1462982813000},{"_id":"themes/maupassant/layout/_partial/footer.jade","hash":"aa020b794e697e8e9612530c97c6295efde469fe","modified":1462982813000},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1462982813000},{"_id":"themes/maupassant/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1462982813000},{"_id":"themes/maupassant/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1462982813000},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1462982813000},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1462982813000},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1462982813000},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"c53ac5e5d44fa99705ae0e212435095e493ea65e","modified":1462982813000},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1462982813000},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"f57a0c76d243882b2b77330132bdb43bc648948b","modified":1462982813000},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"19431336d724d2118e46da43683bce9063176541","modified":1462982813000},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"e119c5afa85abc60d139e2da99b0bfcd7a6530f8","modified":1462982813000},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"193546282908e499813534f86d27ef6e0a1357b3","modified":1462982813000},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1462982813000},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1462982813000},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1462982813000},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1462982813000},{"_id":"themes/maupassant/source/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1462982813000},{"_id":"themes/maupassant/source/css/style.scss","hash":"79e83709c3b7126e105beaa6f3918370969bb1af","modified":1462982813000},{"_id":"themes/maupassant/source/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1462982813000},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1462982813000},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1462982813000},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1462982813000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1462982813000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1462982813000},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1462982813000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1462982813000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1462982813000},{"_id":"themes/maupassant/.git/refs/heads/master","hash":"fd045957d265e1161d6340ba4df57c9aa4e0714f","modified":1462982813000},{"_id":"themes/maupassant/.git/objects/pack/pack-7d12a1387a210a16acdb9615a78c6fada2758bdf.idx","hash":"bcbb29dac48cc8303e25874dc6ef2d2a44127d79","modified":1462982813000},{"_id":"themes/maupassant/.git/logs/refs/heads/master","hash":"56a989fef58fb7398267efbf57cb6a5e1e7352d1","modified":1462982813000},{"_id":"themes/maupassant/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1462982813000},{"_id":"themes/maupassant/.git/logs/refs/remotes/origin/HEAD","hash":"56a989fef58fb7398267efbf57cb6a5e1e7352d1","modified":1462982813000},{"_id":"themes/maupassant/.git/objects/pack/pack-7d12a1387a210a16acdb9615a78c6fada2758bdf.pack","hash":"abd8589e1b7b561eb092d648be8d04f550d2e38a","modified":1462982813000},{"_id":"public/2016/05/11/hello-world/index.html","hash":"730c1a0e18238fb30dae07c8459af397c8cb9ad1","modified":1462988084787},{"_id":"public/archives/index.html","hash":"3438df79444eb05d81e99f9c8eb4393e7050c327","modified":1462988084787},{"_id":"public/archives/2016/index.html","hash":"3438df79444eb05d81e99f9c8eb4393e7050c327","modified":1462988084787},{"_id":"public/archives/2016/05/index.html","hash":"3438df79444eb05d81e99f9c8eb4393e7050c327","modified":1462988084787},{"_id":"public/index.html","hash":"20ae9d6a76a76d2e1ff7beb4922171e3770e81f4","modified":1462988084787},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1462986801798},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1462986801798},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1462986801798},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1462986801798},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1462986801798},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1462986801799},{"_id":"public/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1462986801828},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1462986801828},{"_id":"public/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1462986801829},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1462986801829},{"_id":"public/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1462986801829},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1462986801829},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1462986801829},{"_id":"public/css/style.css","hash":"5e031463c49be0e099889655aaec8538d489b43d","modified":1462986801829},{"_id":"source/_posts/Binder学习笔记（一）.md","hash":"4cd2d90660b5be5b922f1ca4b8bb01fc2f6b6b0b","modified":1462987716000},{"_id":"public/categories/jekyll-update/index.html","hash":"4dd57d4d6b7b8fc229cacd9f739a95be8ebddf99","modified":1462988084787},{"_id":"public/2016/05/11/Binder学习笔记（一）/index.html","hash":"6e5721c9ad09314010b7d21f38c68d282b583db9","modified":1462987723419},{"_id":"source/_posts/.DS_Store","hash":"15d6544ee1ba3ee65f2d07de7064ccb54b177896","modified":1462987576000},{"_id":"source/_posts/Binder学习笔记（一）/05111709.png","hash":"d53d534df34919ea4d290f205101a4dd932b0ad3","modified":1462980489000},{"_id":"source/_posts/BinderLearning1/05111709.png","hash":"d53d534df34919ea4d290f205101a4dd932b0ad3","modified":1462980489000},{"_id":"source/_posts/BinderLearning1.md","hash":"6e20d7caa23129f8a0e973d172f9d737a66bdd72","modified":1462988075000},{"_id":"public/2016/05/11/BinderLearning1/index.html","hash":"a9720afc8825443f04a524b0f47efe04e5e372e6","modified":1462988084789}],"Category":[{"name":"jekyll update","_id":"cio34la7d000138zif0hleawp"}],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-05-11T15:29:13.000Z","updated":"2016-05-11T15:29:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio34kgm6000033zismvhp54l","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"layout":"post","title":"Binder学习笔记（一）","date":"2016-05-11T02:28:48.000Z","_content":"网上看了很多关于binder的文章，但我还是想把自己的心路历程记录下来，有些是跟着别人的脚步领略险峻风景，有些则是自己只身探入代码深处打捞出的收获。我不确定是否全部融会贯通，更担心一两个月后会完全不记得来时的路。最好的验证和留存的方法是把他们写成博文，几个月后回头再来读，看是否还能读得明白。如果可以，说明我两个担心已不复存在；如果又回到云里雾里，刚好可以带着新问题继续探索。文章很多地方会引用Android源码，我的源码版本是6.0.1_r11。\n\n当静态代码走查遭遇多态、依赖外部数据时，常常会陷入困境，眼前多个岔路口，不知该走哪条路。我就顺道把gdb也重新捡起来，动态调一把就知道正确答案了。我尽量详细地记录下使用步骤，以便未来可以很方便地重新走入这条路。\n\n我觉得读代码也应该是“不求甚解”的，不要一竿子插到底，先在一个层面上把问题分析清楚，再逐步深入到下一个层面，逐层攻破。其实跟写代码很像，解决复杂问题的两大利器——分层、分模块。当然最终是要达到山高月小，水落石出的境界。文章会一点一点放出，发出的文章可能还会不断回过头来再修改，希望最终能够打磨出一篇精致小品，以后就再也不用追究Binder了。\n\n##binder的使用（Java代码）\nBinder是Android系统为进程间通信提供的一种方式，在创建Service的时候会经常用到。创建Service的基本步骤如下：\n``` java\nfinal Intent intent = new Intent(this, BindMyService.class);  \nprivate MyServiceConnection conn = new MyServiceConnection();  \n……  \nbindService(intent, connection, Service.BIND_AUTO_CREATE);  // 创建Service \n```\n\n当Service创建成功，Service会回调ServiceConnection的函数：\n`public void onServiceConnected(ComponentName name, IBinder service); `\n\n![](BinderLearning1/05111709.png)\n\n更神奇的是，Service和Client可以是两个不同的进程，而且即使跨进程，Client仍然可以把来自Service的binder当做本地对象来使用。Binder对函数调用做了封装，把函数和参数组装成数据包发给Service，再由Service调用和执行实际的服务接口，并把执行结果也组装成数据包返回给客户端。\n\nJava层的代码会向下进入native层，通过该层的c++代码调用frameworks以及更底层的驱动来完成消息的流转。为了尽快触摸到Binder的本质，我们现在就潜入到native层，用c++代码完成Service的编写和Client端的调用，并以此为起点进入到Binder的实现层。至于从Java到native的桥接，可以留待本质问题水落石出之后再去探究，那只是末枝上的小细节了。\n##binder的使用（C++代码）\n``` c++\n// Test.h  \n#ifndef __TEST_H__  \n#define __TEST_H__  \n#include <stdio.h>  \n#include <binder/IInterface.h>  \n#include <binder/Parcel.h>  \n#include <binder/IBinder.h>  \n#include <binder/Binder.h>  \n#include <binder/ProcessState.h>  \n#include <binder/IPCThreadState.h>  \n#include <binder/IServiceManager.h>  \nusing namespace android;  \nnamespace android  \n{  \n    class ITestService : public IInterface  \n    {  \n     public:  \n        DECLARE_META_INTERFACE(TestService); // declare macro  \n        virtual void test()=0;  \n    };  \n   \n    enum  \n    {  \n        TEST = IBinder::FIRST_CALL_TRANSACTION,  \n    };  \n  \n    class BpTestService: public BpInterface<ITestService> {  \n    public:  \n        BpTestService(const sp<IBinder>& impl);  \n        virtual void test();  \n    };  \n}  \nendif  \n```\n\n``` c++\n// ITestService.cpp\n#include \"Test.h\"  \nnamespace android  \n{  \n    IMPLEMENT_META_INTERFACE(TestService, \"android.TestServer.ITestService\");  \n} \n```\n``` c++\n// TestClient.cpp  \n#include \"Test.h\"  \nnamespace android {  \nBpTestService::BpTestService(const sp<IBinder>& impl) :  \n        BpInterface<ITestService>(impl) {  \n}  \nvoid BpTestService::test() {  \n    printf(\"BpTestService::test()\\n\");  \n    Parcel data, reply;  \n    data.writeInterfaceToken(ITestService::getInterfaceDescriptor());  \n    remote()->transact(TEST, data, &reply);  \n    printf(\"reply: %d\\n\", reply.readInt32());  \n}  \n}  \nint main() {  \n    sp < IServiceManager > sm = defaultServiceManager();  \n    sp < IBinder > binder = sm->getService(String16(\"service.testservice\"));  \n    sp<ITestService> cs = interface_cast < ITestService > (binder);  \n    cs->test();  \n    return 0;  \n}  \n```\n``` c++\n// TestServer.cpp\n#include \"Test.h\"\nnamespace android \n{\n  class BnTestService: public BnInterface<ITestService> \n{\npublic: \n   virtual status_t onTransact(uint32_t code, const Parcel& data, Parcel* reply, uint32_t flags = 0); \n   virtual void test() { printf(\"BnTestService::test()\\n\"); }};\n   status_t BnTestService::onTransact(uint_t code, const Parcel& data, Parcel* reply, uint32_t flags) \n   { \n   switch (code) { \n\t   case TEST: { \n\t\t printf(\"BnTestService::onTransact, code: TEST\\n\"); \n\t\t CHECK_INTERFACE(ITest, data, reply); \n\t\t test(); reply->writeInt32(100); \n\t\t return NO_ERROR; \n\t   } \n\t   break; \n \n\t   default: \n\t   break; \n\t } \n\t return NO_ERROR;\n   }\n}\n\nint main() \n{ \n  sp < ProcessState > proc(ProcessState::self()); \n  sp < IServiceManager > sm = defaultServiceManager(); \n  sm->addService(String16(\"service.testservice\"), new BnTestService()); \n  ProcessState::self()->startThreadPool(); \n  IPCThreadState::self()->joinThreadPool(); \n  return 0;\n}\n```\n\n``` bash\n#Android.mk\nLOCAL_PATH := $(call my-dir)  \n  \n#生成binder service的服务端  \ninclude $(CLEAR_VARS)  \nLOCAL_SHARED_LIBRARIES := \\  \n    libcutils \\  \n    libutils \\  \n    libbinder   \nLOCAL_MODULE    := TestServer  \nLOCAL_SRC_FILES := \\  \n    TestServer.cpp \\  \n    ITestService.cpp  \nLOCAL_MODULE_TAGS := optional  \ninclude $(BUILD_EXECUTABLE)  \n   \n#生成binder service的测试client端  \ninclude $(CLEAR_VARS)  \nLOCAL_SHARED_LIBRARIES := \\  \n    libcutils \\  \n    libutils \\  \n    libbinder   \nLOCAL_MODULE    := TestClient  \nLOCAL_SRC_FILES := \\  \n    TestClient.cpp \\  \n    ITestService.cpp  \nLOCAL_MODULE_TAGS := optional  \ninclude $(BUILD_EXECUTABLE)  \n```\n\n在Android源码external目录下创建文件夹testservice，并将以上五个文件放到该文件夹下。\n\n执行如下命令，完成编译：\n\n`$ mmm external/testservice`\n\n我把Android源码的build/envsetup.sh内的TARGET_BUILD_TYPE默认值全改成了debug，这样确保执行以上mmm命令的时候，总会生成debug版。\n编译完成后，执行如下命令：\n``` bash\n$ adb shell mkdir /data/local/tmp/testservice  # 把生成的两个可执行程序拷贝到模拟器\n$ adb push out/debug/target/product/generic/obj/EXECUTABLES/TestServer_intermediates/LINKED/TestServer /data/local/tmp/testservice\n$ adb push out/debug/target/product/generic/obj/EXECUTABLES/TestClient_intermediates/LINKED/TestClient /data/local/tmp/testservice  # 添加可执行权限\n$ adb shell chmod 755 /data/local/tmp/testservice/  # 启动服务端\n$ adb shell /data/local/tmp/testservice/TestServerBnTestService::onTransact, code: TESTBnTestService::test()# 在另一个终端下客户端：\n$ adb shell /data/local/tmp/testservice/TestClientBpTestService::test()reply 100\n```\n\nOK，前期准备就这么些，接下来就可以测试代码为入口深入到binder的内部实现了。\n\n[jekyll-docs]: http://jekyllrb.com/docs/home\n[jekyll-gh]:   https://github.com/jekyll/jekyll\n[jekyll-talk]: https://talk.jekyllrb.com/\n","source":"_posts/BinderLearning1.md","raw":"---\nlayout: post\ntitle:  \"Binder学习笔记（一）\"\ndate:   2016-05-11 10:28:48 +0800\ncategories: jekyll update\n---\n网上看了很多关于binder的文章，但我还是想把自己的心路历程记录下来，有些是跟着别人的脚步领略险峻风景，有些则是自己只身探入代码深处打捞出的收获。我不确定是否全部融会贯通，更担心一两个月后会完全不记得来时的路。最好的验证和留存的方法是把他们写成博文，几个月后回头再来读，看是否还能读得明白。如果可以，说明我两个担心已不复存在；如果又回到云里雾里，刚好可以带着新问题继续探索。文章很多地方会引用Android源码，我的源码版本是6.0.1_r11。\n\n当静态代码走查遭遇多态、依赖外部数据时，常常会陷入困境，眼前多个岔路口，不知该走哪条路。我就顺道把gdb也重新捡起来，动态调一把就知道正确答案了。我尽量详细地记录下使用步骤，以便未来可以很方便地重新走入这条路。\n\n我觉得读代码也应该是“不求甚解”的，不要一竿子插到底，先在一个层面上把问题分析清楚，再逐步深入到下一个层面，逐层攻破。其实跟写代码很像，解决复杂问题的两大利器——分层、分模块。当然最终是要达到山高月小，水落石出的境界。文章会一点一点放出，发出的文章可能还会不断回过头来再修改，希望最终能够打磨出一篇精致小品，以后就再也不用追究Binder了。\n\n##binder的使用（Java代码）\nBinder是Android系统为进程间通信提供的一种方式，在创建Service的时候会经常用到。创建Service的基本步骤如下：\n``` java\nfinal Intent intent = new Intent(this, BindMyService.class);  \nprivate MyServiceConnection conn = new MyServiceConnection();  \n……  \nbindService(intent, connection, Service.BIND_AUTO_CREATE);  // 创建Service \n```\n\n当Service创建成功，Service会回调ServiceConnection的函数：\n`public void onServiceConnected(ComponentName name, IBinder service); `\n\n![](BinderLearning1/05111709.png)\n\n更神奇的是，Service和Client可以是两个不同的进程，而且即使跨进程，Client仍然可以把来自Service的binder当做本地对象来使用。Binder对函数调用做了封装，把函数和参数组装成数据包发给Service，再由Service调用和执行实际的服务接口，并把执行结果也组装成数据包返回给客户端。\n\nJava层的代码会向下进入native层，通过该层的c++代码调用frameworks以及更底层的驱动来完成消息的流转。为了尽快触摸到Binder的本质，我们现在就潜入到native层，用c++代码完成Service的编写和Client端的调用，并以此为起点进入到Binder的实现层。至于从Java到native的桥接，可以留待本质问题水落石出之后再去探究，那只是末枝上的小细节了。\n##binder的使用（C++代码）\n``` c++\n// Test.h  \n#ifndef __TEST_H__  \n#define __TEST_H__  \n#include <stdio.h>  \n#include <binder/IInterface.h>  \n#include <binder/Parcel.h>  \n#include <binder/IBinder.h>  \n#include <binder/Binder.h>  \n#include <binder/ProcessState.h>  \n#include <binder/IPCThreadState.h>  \n#include <binder/IServiceManager.h>  \nusing namespace android;  \nnamespace android  \n{  \n    class ITestService : public IInterface  \n    {  \n     public:  \n        DECLARE_META_INTERFACE(TestService); // declare macro  \n        virtual void test()=0;  \n    };  \n   \n    enum  \n    {  \n        TEST = IBinder::FIRST_CALL_TRANSACTION,  \n    };  \n  \n    class BpTestService: public BpInterface<ITestService> {  \n    public:  \n        BpTestService(const sp<IBinder>& impl);  \n        virtual void test();  \n    };  \n}  \nendif  \n```\n\n``` c++\n// ITestService.cpp\n#include \"Test.h\"  \nnamespace android  \n{  \n    IMPLEMENT_META_INTERFACE(TestService, \"android.TestServer.ITestService\");  \n} \n```\n``` c++\n// TestClient.cpp  \n#include \"Test.h\"  \nnamespace android {  \nBpTestService::BpTestService(const sp<IBinder>& impl) :  \n        BpInterface<ITestService>(impl) {  \n}  \nvoid BpTestService::test() {  \n    printf(\"BpTestService::test()\\n\");  \n    Parcel data, reply;  \n    data.writeInterfaceToken(ITestService::getInterfaceDescriptor());  \n    remote()->transact(TEST, data, &reply);  \n    printf(\"reply: %d\\n\", reply.readInt32());  \n}  \n}  \nint main() {  \n    sp < IServiceManager > sm = defaultServiceManager();  \n    sp < IBinder > binder = sm->getService(String16(\"service.testservice\"));  \n    sp<ITestService> cs = interface_cast < ITestService > (binder);  \n    cs->test();  \n    return 0;  \n}  \n```\n``` c++\n// TestServer.cpp\n#include \"Test.h\"\nnamespace android \n{\n  class BnTestService: public BnInterface<ITestService> \n{\npublic: \n   virtual status_t onTransact(uint32_t code, const Parcel& data, Parcel* reply, uint32_t flags = 0); \n   virtual void test() { printf(\"BnTestService::test()\\n\"); }};\n   status_t BnTestService::onTransact(uint_t code, const Parcel& data, Parcel* reply, uint32_t flags) \n   { \n   switch (code) { \n\t   case TEST: { \n\t\t printf(\"BnTestService::onTransact, code: TEST\\n\"); \n\t\t CHECK_INTERFACE(ITest, data, reply); \n\t\t test(); reply->writeInt32(100); \n\t\t return NO_ERROR; \n\t   } \n\t   break; \n \n\t   default: \n\t   break; \n\t } \n\t return NO_ERROR;\n   }\n}\n\nint main() \n{ \n  sp < ProcessState > proc(ProcessState::self()); \n  sp < IServiceManager > sm = defaultServiceManager(); \n  sm->addService(String16(\"service.testservice\"), new BnTestService()); \n  ProcessState::self()->startThreadPool(); \n  IPCThreadState::self()->joinThreadPool(); \n  return 0;\n}\n```\n\n``` bash\n#Android.mk\nLOCAL_PATH := $(call my-dir)  \n  \n#生成binder service的服务端  \ninclude $(CLEAR_VARS)  \nLOCAL_SHARED_LIBRARIES := \\  \n    libcutils \\  \n    libutils \\  \n    libbinder   \nLOCAL_MODULE    := TestServer  \nLOCAL_SRC_FILES := \\  \n    TestServer.cpp \\  \n    ITestService.cpp  \nLOCAL_MODULE_TAGS := optional  \ninclude $(BUILD_EXECUTABLE)  \n   \n#生成binder service的测试client端  \ninclude $(CLEAR_VARS)  \nLOCAL_SHARED_LIBRARIES := \\  \n    libcutils \\  \n    libutils \\  \n    libbinder   \nLOCAL_MODULE    := TestClient  \nLOCAL_SRC_FILES := \\  \n    TestClient.cpp \\  \n    ITestService.cpp  \nLOCAL_MODULE_TAGS := optional  \ninclude $(BUILD_EXECUTABLE)  \n```\n\n在Android源码external目录下创建文件夹testservice，并将以上五个文件放到该文件夹下。\n\n执行如下命令，完成编译：\n\n`$ mmm external/testservice`\n\n我把Android源码的build/envsetup.sh内的TARGET_BUILD_TYPE默认值全改成了debug，这样确保执行以上mmm命令的时候，总会生成debug版。\n编译完成后，执行如下命令：\n``` bash\n$ adb shell mkdir /data/local/tmp/testservice  # 把生成的两个可执行程序拷贝到模拟器\n$ adb push out/debug/target/product/generic/obj/EXECUTABLES/TestServer_intermediates/LINKED/TestServer /data/local/tmp/testservice\n$ adb push out/debug/target/product/generic/obj/EXECUTABLES/TestClient_intermediates/LINKED/TestClient /data/local/tmp/testservice  # 添加可执行权限\n$ adb shell chmod 755 /data/local/tmp/testservice/  # 启动服务端\n$ adb shell /data/local/tmp/testservice/TestServerBnTestService::onTransact, code: TESTBnTestService::test()# 在另一个终端下客户端：\n$ adb shell /data/local/tmp/testservice/TestClientBpTestService::test()reply 100\n```\n\nOK，前期准备就这么些，接下来就可以测试代码为入口深入到binder的内部实现了。\n\n[jekyll-docs]: http://jekyllrb.com/docs/home\n[jekyll-gh]:   https://github.com/jekyll/jekyll\n[jekyll-talk]: https://talk.jekyllrb.com/\n","slug":"BinderLearning1","published":1,"updated":"2016-05-11T17:34:35.000Z","_id":"cio35axng0000dczim1r8lz1d","comments":1,"photos":[],"link":"","content":"<p>网上看了很多关于binder的文章，但我还是想把自己的心路历程记录下来，有些是跟着别人的脚步领略险峻风景，有些则是自己只身探入代码深处打捞出的收获。我不确定是否全部融会贯通，更担心一两个月后会完全不记得来时的路。最好的验证和留存的方法是把他们写成博文，几个月后回头再来读，看是否还能读得明白。如果可以，说明我两个担心已不复存在；如果又回到云里雾里，刚好可以带着新问题继续探索。文章很多地方会引用Android源码，我的源码版本是6.0.1_r11。</p>\n<p>当静态代码走查遭遇多态、依赖外部数据时，常常会陷入困境，眼前多个岔路口，不知该走哪条路。我就顺道把gdb也重新捡起来，动态调一把就知道正确答案了。我尽量详细地记录下使用步骤，以便未来可以很方便地重新走入这条路。</p>\n<p>我觉得读代码也应该是“不求甚解”的，不要一竿子插到底，先在一个层面上把问题分析清楚，再逐步深入到下一个层面，逐层攻破。其实跟写代码很像，解决复杂问题的两大利器——分层、分模块。当然最终是要达到山高月小，水落石出的境界。文章会一点一点放出，发出的文章可能还会不断回过头来再修改，希望最终能够打磨出一篇精致小品，以后就再也不用追究Binder了。</p>\n<p>##binder的使用（Java代码）<br>Binder是Android系统为进程间通信提供的一种方式，在创建Service的时候会经常用到。创建Service的基本步骤如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, BindMyService.class);  </span><br><span class=\"line\"><span class=\"keyword\">private</span> MyServiceConnection conn = <span class=\"keyword\">new</span> MyServiceConnection();  </span><br><span class=\"line\">……  </span><br><span class=\"line\">bindService(intent, connection, Service.BIND_AUTO_CREATE);  <span class=\"comment\">// 创建Service</span></span><br></pre></td></tr></table></figure></p>\n<p>当Service创建成功，Service会回调ServiceConnection的函数：<br><code>public void onServiceConnected(ComponentName name, IBinder service);</code></p>\n<p><img src=\"BinderLearning1/05111709.png\" alt=\"\"></p>\n<p>更神奇的是，Service和Client可以是两个不同的进程，而且即使跨进程，Client仍然可以把来自Service的binder当做本地对象来使用。Binder对函数调用做了封装，把函数和参数组装成数据包发给Service，再由Service调用和执行实际的服务接口，并把执行结果也组装成数据包返回给客户端。</p>\n<p>Java层的代码会向下进入native层，通过该层的c++代码调用frameworks以及更底层的驱动来完成消息的流转。为了尽快触摸到Binder的本质，我们现在就潜入到native层，用c++代码完成Service的编写和Client端的调用，并以此为起点进入到Binder的实现层。至于从Java到native的桥接，可以留待本质问题水落石出之后再去探究，那只是末枝上的小细节了。</p>\n<p>##binder的使用（C++代码）<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.h  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __TEST_H__  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __TEST_H__  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;binder/IInterface.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;binder/Parcel.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;binder/IBinder.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;binder/Binder.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;binder/ProcessState.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;binder/IPCThreadState.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;binder/IServiceManager.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> android;  </span><br><span class=\"line\"><span class=\"keyword\">namespace</span> android  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">class</span> ITestService : <span class=\"keyword\">public</span> IInterface  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">     <span class=\"keyword\">public</span>:  </span><br><span class=\"line\">        DECLARE_META_INTERFACE(TestService); <span class=\"comment\">// declare macro  </span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>=<span class=\"number\">0</span>;  </span><br><span class=\"line\">    &#125;;  </span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">enum</span>  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        TEST = IBinder::FIRST_CALL_TRANSACTION,  </span><br><span class=\"line\">    &#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">class</span> BpTestService: <span class=\"keyword\">public</span> BpInterface&lt;ITestService&gt; &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span>:  </span><br><span class=\"line\">        BpTestService(<span class=\"keyword\">const</span> sp&lt;IBinder&gt;&amp; impl);  </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    &#125;;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">endif</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ITestService.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"string\">\"Test.h\"</span>  </span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> android  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    IMPLEMENT_META_INTERFACE(TestService, <span class=\"string\">\"android.TestServer.ITestService\"</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestClient.cpp  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"string\">\"Test.h\"</span>  </span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> android &#123;  </span><br><span class=\"line\">BpTestService::BpTestService(<span class=\"keyword\">const</span> sp&lt;IBinder&gt;&amp; impl) :  </span><br><span class=\"line\">        BpInterface&lt;ITestService&gt;(impl) &#123;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">void</span> BpTestService::test() &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"BpTestService::test()\\n\"</span>);  </span><br><span class=\"line\">    Parcel data, reply;  </span><br><span class=\"line\">    data.writeInterfaceToken(ITestService::getInterfaceDescriptor());  </span><br><span class=\"line\">    remote()-&gt;transact(TEST, data, &amp;reply);  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"reply: %d\\n\"</span>, reply.readInt32());  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    sp &lt; IServiceManager &gt; sm = defaultServiceManager();  </span><br><span class=\"line\">    sp &lt; IBinder &gt; binder = sm-&gt;getService(String16(<span class=\"string\">\"service.testservice\"</span>));  </span><br><span class=\"line\">    sp&lt;ITestService&gt; cs = interface_cast &lt; ITestService &gt; (binder);  </span><br><span class=\"line\">    cs-&gt;test();  </span><br><span class=\"line\">    return <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestServer.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"string\">\"Test.h\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> android </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> BnTestService: <span class=\"keyword\">public</span> BnInterface&lt;ITestService&gt; </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>: </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">virtual</span> status_t <span class=\"title\">onTransact</span><span class=\"params\">(uint32_t code, <span class=\"keyword\">const</span> Parcel&amp; data, Parcel* reply, uint32_t flags = <span class=\"number\">0</span>)</span></span>; </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">printf</span>(<span class=\"string\">\"BnTestService::test()\\n\"</span>); &#125;&#125;;</span><br><span class=\"line\">   <span class=\"keyword\">status_t</span> BnTestService::onTransact(<span class=\"keyword\">uint_t</span> code, <span class=\"keyword\">const</span> Parcel&amp; data, Parcel* reply, <span class=\"keyword\">uint32_t</span> flags) </span><br><span class=\"line\">   &#123; </span><br><span class=\"line\">   <span class=\"keyword\">switch</span> (code) &#123; </span><br><span class=\"line\">\t   <span class=\"keyword\">case</span> TEST: &#123; </span><br><span class=\"line\">\t\t <span class=\"built_in\">printf</span>(<span class=\"string\">\"BnTestService::onTransact, code: TEST\\n\"</span>); </span><br><span class=\"line\">\t\t CHECK_INTERFACE(ITest, data, reply); </span><br><span class=\"line\">\t\t test(); reply-&gt;writeInt32(<span class=\"number\">100</span>); </span><br><span class=\"line\">\t\t return NO_ERROR; </span><br><span class=\"line\">\t   &#125; </span><br><span class=\"line\">\t   <span class=\"keyword\">break</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">\t   <span class=\"keyword\">default</span>: </span><br><span class=\"line\">\t   <span class=\"keyword\">break</span>; </span><br><span class=\"line\">\t &#125; </span><br><span class=\"line\">\t return NO_ERROR;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span><br><span class=\"line\"></span>&#123; </span><br><span class=\"line\">  sp &lt; ProcessState &gt; proc(ProcessState::self()); </span><br><span class=\"line\">  sp &lt; IServiceManager &gt; sm = defaultServiceManager(); </span><br><span class=\"line\">  sm-&gt;addService(String16(<span class=\"string\">\"service.testservice\"</span>), new BnTestService()); </span><br><span class=\"line\">  ProcessState::self()-&gt;startThreadPool(); </span><br><span class=\"line\">  IPCThreadState::self()-&gt;joinThreadPool(); </span><br><span class=\"line\">  return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Android.mk</span></span><br><span class=\"line\">LOCAL_PATH := $(call my-dir)  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#生成binder service的服务端  </span></span><br><span class=\"line\">include $(CLEAR_VARS)  </span><br><span class=\"line\">LOCAL_SHARED_LIBRARIES := \\  </span><br><span class=\"line\">    libcutils \\  </span><br><span class=\"line\">    libutils \\  </span><br><span class=\"line\">    libbinder   </span><br><span class=\"line\">LOCAL_MODULE    := TestServer  </span><br><span class=\"line\">LOCAL_SRC_FILES := \\  </span><br><span class=\"line\">    TestServer.cpp \\  </span><br><span class=\"line\">    ITestService.cpp  </span><br><span class=\"line\">LOCAL_MODULE_TAGS := optional  </span><br><span class=\"line\">include $(BUILD_EXECUTABLE)  </span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\">#生成binder service的测试client端  </span></span><br><span class=\"line\">include $(CLEAR_VARS)  </span><br><span class=\"line\">LOCAL_SHARED_LIBRARIES := \\  </span><br><span class=\"line\">    libcutils \\  </span><br><span class=\"line\">    libutils \\  </span><br><span class=\"line\">    libbinder   </span><br><span class=\"line\">LOCAL_MODULE    := TestClient  </span><br><span class=\"line\">LOCAL_SRC_FILES := \\  </span><br><span class=\"line\">    TestClient.cpp \\  </span><br><span class=\"line\">    ITestService.cpp  </span><br><span class=\"line\">LOCAL_MODULE_TAGS := optional  </span><br><span class=\"line\">include $(BUILD_EXECUTABLE)</span><br></pre></td></tr></table></figure>\n<p>在Android源码external目录下创建文件夹testservice，并将以上五个文件放到该文件夹下。</p>\n<p>执行如下命令，完成编译：</p>\n<p><code>$ mmm external/testservice</code></p>\n<p>我把Android源码的build/envsetup.sh内的TARGET_BUILD_TYPE默认值全改成了debug，这样确保执行以上mmm命令的时候，总会生成debug版。<br>编译完成后，执行如下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ adb shell mkdir /data/<span class=\"built_in\">local</span>/tmp/testservice  <span class=\"comment\"># 把生成的两个可执行程序拷贝到模拟器</span></span><br><span class=\"line\">$ adb push out/debug/target/product/generic/obj/EXECUTABLES/TestServer_intermediates/LINKED/TestServer /data/<span class=\"built_in\">local</span>/tmp/testservice</span><br><span class=\"line\">$ adb push out/debug/target/product/generic/obj/EXECUTABLES/TestClient_intermediates/LINKED/TestClient /data/<span class=\"built_in\">local</span>/tmp/testservice  <span class=\"comment\"># 添加可执行权限</span></span><br><span class=\"line\">$ adb shell chmod 755 /data/<span class=\"built_in\">local</span>/tmp/testservice/  <span class=\"comment\"># 启动服务端</span></span><br><span class=\"line\">$ adb shell /data/<span class=\"built_in\">local</span>/tmp/testservice/TestServerBnTestService::onTransact, code: TESTBnTestService::<span class=\"built_in\">test</span>()<span class=\"comment\"># 在另一个终端下客户端：</span></span><br><span class=\"line\">$ adb shell /data/<span class=\"built_in\">local</span>/tmp/testservice/TestClientBpTestService::<span class=\"built_in\">test</span>()reply 100</span><br></pre></td></tr></table></figure></p>\n<p>OK，前期准备就这么些，接下来就可以测试代码为入口深入到binder的内部实现了。</p>\n","excerpt":"","more":"<p>网上看了很多关于binder的文章，但我还是想把自己的心路历程记录下来，有些是跟着别人的脚步领略险峻风景，有些则是自己只身探入代码深处打捞出的收获。我不确定是否全部融会贯通，更担心一两个月后会完全不记得来时的路。最好的验证和留存的方法是把他们写成博文，几个月后回头再来读，看是否还能读得明白。如果可以，说明我两个担心已不复存在；如果又回到云里雾里，刚好可以带着新问题继续探索。文章很多地方会引用Android源码，我的源码版本是6.0.1_r11。</p>\n<p>当静态代码走查遭遇多态、依赖外部数据时，常常会陷入困境，眼前多个岔路口，不知该走哪条路。我就顺道把gdb也重新捡起来，动态调一把就知道正确答案了。我尽量详细地记录下使用步骤，以便未来可以很方便地重新走入这条路。</p>\n<p>我觉得读代码也应该是“不求甚解”的，不要一竿子插到底，先在一个层面上把问题分析清楚，再逐步深入到下一个层面，逐层攻破。其实跟写代码很像，解决复杂问题的两大利器——分层、分模块。当然最终是要达到山高月小，水落石出的境界。文章会一点一点放出，发出的文章可能还会不断回过头来再修改，希望最终能够打磨出一篇精致小品，以后就再也不用追究Binder了。</p>\n<p>##binder的使用（Java代码）<br>Binder是Android系统为进程间通信提供的一种方式，在创建Service的时候会经常用到。创建Service的基本步骤如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, BindMyService.class);  </span><br><span class=\"line\"><span class=\"keyword\">private</span> MyServiceConnection conn = <span class=\"keyword\">new</span> MyServiceConnection();  </span><br><span class=\"line\">……  </span><br><span class=\"line\">bindService(intent, connection, Service.BIND_AUTO_CREATE);  <span class=\"comment\">// 创建Service</span></span><br></pre></td></tr></table></figure></p>\n<p>当Service创建成功，Service会回调ServiceConnection的函数：<br><code>public void onServiceConnected(ComponentName name, IBinder service);</code></p>\n<p><img src=\"BinderLearning1/05111709.png\" alt=\"\"></p>\n<p>更神奇的是，Service和Client可以是两个不同的进程，而且即使跨进程，Client仍然可以把来自Service的binder当做本地对象来使用。Binder对函数调用做了封装，把函数和参数组装成数据包发给Service，再由Service调用和执行实际的服务接口，并把执行结果也组装成数据包返回给客户端。</p>\n<p>Java层的代码会向下进入native层，通过该层的c++代码调用frameworks以及更底层的驱动来完成消息的流转。为了尽快触摸到Binder的本质，我们现在就潜入到native层，用c++代码完成Service的编写和Client端的调用，并以此为起点进入到Binder的实现层。至于从Java到native的桥接，可以留待本质问题水落石出之后再去探究，那只是末枝上的小细节了。</p>\n<p>##binder的使用（C++代码）<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.h  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __TEST_H__  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __TEST_H__  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;binder/IInterface.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;binder/Parcel.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;binder/IBinder.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;binder/Binder.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;binder/ProcessState.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;binder/IPCThreadState.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;binder/IServiceManager.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> android;  </span><br><span class=\"line\"><span class=\"keyword\">namespace</span> android  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">class</span> ITestService : <span class=\"keyword\">public</span> IInterface  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">     <span class=\"keyword\">public</span>:  </span><br><span class=\"line\">        DECLARE_META_INTERFACE(TestService); <span class=\"comment\">// declare macro  </span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>=<span class=\"number\">0</span>;  </span><br><span class=\"line\">    &#125;;  </span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">enum</span>  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        TEST = IBinder::FIRST_CALL_TRANSACTION,  </span><br><span class=\"line\">    &#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">class</span> BpTestService: <span class=\"keyword\">public</span> BpInterface&lt;ITestService&gt; &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span>:  </span><br><span class=\"line\">        BpTestService(<span class=\"keyword\">const</span> sp&lt;IBinder&gt;&amp; impl);  </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    &#125;;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">endif</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ITestService.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"string\">\"Test.h\"</span>  </span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> android  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    IMPLEMENT_META_INTERFACE(TestService, <span class=\"string\">\"android.TestServer.ITestService\"</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestClient.cpp  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"string\">\"Test.h\"</span>  </span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> android &#123;  </span><br><span class=\"line\">BpTestService::BpTestService(<span class=\"keyword\">const</span> sp&lt;IBinder&gt;&amp; impl) :  </span><br><span class=\"line\">        BpInterface&lt;ITestService&gt;(impl) &#123;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">void</span> BpTestService::test() &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"BpTestService::test()\\n\"</span>);  </span><br><span class=\"line\">    Parcel data, reply;  </span><br><span class=\"line\">    data.writeInterfaceToken(ITestService::getInterfaceDescriptor());  </span><br><span class=\"line\">    remote()-&gt;transact(TEST, data, &amp;reply);  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"reply: %d\\n\"</span>, reply.readInt32());  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    sp &lt; IServiceManager &gt; sm = defaultServiceManager();  </span><br><span class=\"line\">    sp &lt; IBinder &gt; binder = sm-&gt;getService(String16(<span class=\"string\">\"service.testservice\"</span>));  </span><br><span class=\"line\">    sp&lt;ITestService&gt; cs = interface_cast &lt; ITestService &gt; (binder);  </span><br><span class=\"line\">    cs-&gt;test();  </span><br><span class=\"line\">    return <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestServer.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"string\">\"Test.h\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> android </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> BnTestService: <span class=\"keyword\">public</span> BnInterface&lt;ITestService&gt; </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>: </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">virtual</span> status_t <span class=\"title\">onTransact</span><span class=\"params\">(uint32_t code, <span class=\"keyword\">const</span> Parcel&amp; data, Parcel* reply, uint32_t flags = <span class=\"number\">0</span>)</span></span>; </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">printf</span>(<span class=\"string\">\"BnTestService::test()\\n\"</span>); &#125;&#125;;</span><br><span class=\"line\">   <span class=\"keyword\">status_t</span> BnTestService::onTransact(<span class=\"keyword\">uint_t</span> code, <span class=\"keyword\">const</span> Parcel&amp; data, Parcel* reply, <span class=\"keyword\">uint32_t</span> flags) </span><br><span class=\"line\">   &#123; </span><br><span class=\"line\">   <span class=\"keyword\">switch</span> (code) &#123; </span><br><span class=\"line\">\t   <span class=\"keyword\">case</span> TEST: &#123; </span><br><span class=\"line\">\t\t <span class=\"built_in\">printf</span>(<span class=\"string\">\"BnTestService::onTransact, code: TEST\\n\"</span>); </span><br><span class=\"line\">\t\t CHECK_INTERFACE(ITest, data, reply); </span><br><span class=\"line\">\t\t test(); reply-&gt;writeInt32(<span class=\"number\">100</span>); </span><br><span class=\"line\">\t\t return NO_ERROR; </span><br><span class=\"line\">\t   &#125; </span><br><span class=\"line\">\t   <span class=\"keyword\">break</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">\t   <span class=\"keyword\">default</span>: </span><br><span class=\"line\">\t   <span class=\"keyword\">break</span>; </span><br><span class=\"line\">\t &#125; </span><br><span class=\"line\">\t return NO_ERROR;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span><br><span class=\"line\"></span>&#123; </span><br><span class=\"line\">  sp &lt; ProcessState &gt; proc(ProcessState::self()); </span><br><span class=\"line\">  sp &lt; IServiceManager &gt; sm = defaultServiceManager(); </span><br><span class=\"line\">  sm-&gt;addService(String16(<span class=\"string\">\"service.testservice\"</span>), new BnTestService()); </span><br><span class=\"line\">  ProcessState::self()-&gt;startThreadPool(); </span><br><span class=\"line\">  IPCThreadState::self()-&gt;joinThreadPool(); </span><br><span class=\"line\">  return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Android.mk</span></span><br><span class=\"line\">LOCAL_PATH := $(call my-dir)  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#生成binder service的服务端  </span></span><br><span class=\"line\">include $(CLEAR_VARS)  </span><br><span class=\"line\">LOCAL_SHARED_LIBRARIES := \\  </span><br><span class=\"line\">    libcutils \\  </span><br><span class=\"line\">    libutils \\  </span><br><span class=\"line\">    libbinder   </span><br><span class=\"line\">LOCAL_MODULE    := TestServer  </span><br><span class=\"line\">LOCAL_SRC_FILES := \\  </span><br><span class=\"line\">    TestServer.cpp \\  </span><br><span class=\"line\">    ITestService.cpp  </span><br><span class=\"line\">LOCAL_MODULE_TAGS := optional  </span><br><span class=\"line\">include $(BUILD_EXECUTABLE)  </span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\">#生成binder service的测试client端  </span></span><br><span class=\"line\">include $(CLEAR_VARS)  </span><br><span class=\"line\">LOCAL_SHARED_LIBRARIES := \\  </span><br><span class=\"line\">    libcutils \\  </span><br><span class=\"line\">    libutils \\  </span><br><span class=\"line\">    libbinder   </span><br><span class=\"line\">LOCAL_MODULE    := TestClient  </span><br><span class=\"line\">LOCAL_SRC_FILES := \\  </span><br><span class=\"line\">    TestClient.cpp \\  </span><br><span class=\"line\">    ITestService.cpp  </span><br><span class=\"line\">LOCAL_MODULE_TAGS := optional  </span><br><span class=\"line\">include $(BUILD_EXECUTABLE)</span><br></pre></td></tr></table></figure>\n<p>在Android源码external目录下创建文件夹testservice，并将以上五个文件放到该文件夹下。</p>\n<p>执行如下命令，完成编译：</p>\n<p><code>$ mmm external/testservice</code></p>\n<p>我把Android源码的build/envsetup.sh内的TARGET_BUILD_TYPE默认值全改成了debug，这样确保执行以上mmm命令的时候，总会生成debug版。<br>编译完成后，执行如下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ adb shell mkdir /data/<span class=\"built_in\">local</span>/tmp/testservice  <span class=\"comment\"># 把生成的两个可执行程序拷贝到模拟器</span></span><br><span class=\"line\">$ adb push out/debug/target/product/generic/obj/EXECUTABLES/TestServer_intermediates/LINKED/TestServer /data/<span class=\"built_in\">local</span>/tmp/testservice</span><br><span class=\"line\">$ adb push out/debug/target/product/generic/obj/EXECUTABLES/TestClient_intermediates/LINKED/TestClient /data/<span class=\"built_in\">local</span>/tmp/testservice  <span class=\"comment\"># 添加可执行权限</span></span><br><span class=\"line\">$ adb shell chmod 755 /data/<span class=\"built_in\">local</span>/tmp/testservice/  <span class=\"comment\"># 启动服务端</span></span><br><span class=\"line\">$ adb shell /data/<span class=\"built_in\">local</span>/tmp/testservice/TestServerBnTestService::onTransact, code: TESTBnTestService::<span class=\"built_in\">test</span>()<span class=\"comment\"># 在另一个终端下客户端：</span></span><br><span class=\"line\">$ adb shell /data/<span class=\"built_in\">local</span>/tmp/testservice/TestClientBpTestService::<span class=\"built_in\">test</span>()reply 100</span><br></pre></td></tr></table></figure></p>\n<p>OK，前期准备就这么些，接下来就可以测试代码为入口深入到binder的内部实现了。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cio35axng0000dczim1r8lz1d","category_id":"cio34la7d000138zif0hleawp","_id":"cio35axnj0001dczi2ymtlctm"}],"PostTag":[],"Tag":[]}}